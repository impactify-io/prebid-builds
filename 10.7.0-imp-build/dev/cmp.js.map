{"version":3,"file":"cmp.js","mappings":"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","sources":["webpack://prebid.js/../../libraries/cmp/cmpClient.js"],"sourcesContent":["import {PbPromise} from '../../src/utils/promise.js';\n\n/**\n * @typedef {function} CMPClient\n *\n * @param {{}} params CMP parameters. Currently this is a subset of {command, callback, parameter, version}.\n * @param {boolean} once if true, discard cross-frame event listeners once a reply message is received.\n * @returns {Promise<*>} a promise to the API's \"result\" - see the `mode` argument to `cmpClient` on how that's determined.\n * @property {boolean} isDirect true if the CMP is directly accessible (no postMessage required)\n * @property {() => void} close close the client; currently, this just stops listening for cross-frame messages.\n */\n\nexport const MODE_MIXED = 0;\nexport const MODE_RETURN = 1;\nexport const MODE_CALLBACK = 2;\n\n/**\n * Returns a client function that can interface with a CMP regardless of where it's located.\n *\n * @param {object} obj\n * @param obj.apiName name of the CMP api, e.g. \"__gpp\"\n * @param [obj.apiVersion] CMP API version\n * @param [obj.apiArgs] names of the arguments taken by the api function, in order.\n * @param [obj.callbackArgs] names of the cross-frame response payload properties that should be passed as callback arguments, in order\n * @param [obj.mode] controls the callbacks passed to the underlying API, and how the promises returned by the client are resolved.\n *\n * The client behaves differently when it's provided a `callback` argument vs when it's not - for short, let's name these\n * cases \"subscriptions\" and \"one-shot calls\" respectively:\n *\n * With `mode: MODE_MIXED` (the default), promises returned on subscriptions are resolved to undefined when the callback\n * is first run (that is, the promise resolves when the CMP replies, but what it replies with is discarded and\n * left for the callback to deal with). For one-shot calls, the returned promise is resolved to the API's\n * return value when it's directly accessible, or with the result from the first (and, presumably, the only)\n * cross-frame reply when it's not;\n *\n * With `mode: MODE_RETURN`, the returned promise always resolves to the API's return value - which is taken to be undefined\n * when cross-frame;\n *\n * With `mode: MODE_CALLBACK`, the underlying API is expected to never directly return anything significant; instead,\n * it should always accept a callback and - for one-shot calls - invoke it only once with the result. The client will\n * automatically generate an appropriate callback for one-shot calls and use the result it's given to resolve\n * the returned promise. Subscriptions are treated in the same way as MODE_MIXED.\n *\n * @param win\n * @returns {CMPClient} CMP invocation function (or null if no CMP was found).\n */\nexport function cmpClient(\n  {\n    apiName,\n    apiVersion,\n    apiArgs = ['command', 'callback', 'parameter', 'version'],\n    callbackArgs = ['returnValue', 'success'],\n    mode = MODE_MIXED,\n  },\n  win = window\n) {\n  const cmpCallbacks = {};\n  const callName = `${apiName}Call`;\n  const cmpDataPkgName = `${apiName}Return`;\n\n  function handleMessage(event) {\n    const json = (typeof event.data === 'string' && event.data.includes(cmpDataPkgName)) ? JSON.parse(event.data) : event.data;\n    if (json?.[cmpDataPkgName]?.callId) {\n      const payload = json[cmpDataPkgName];\n\n      if (cmpCallbacks.hasOwnProperty(payload.callId)) {\n        cmpCallbacks[payload.callId](...callbackArgs.map(name => payload[name]));\n      }\n    }\n  }\n\n  function findCMP() {\n    let f = win;\n    let cmpFrame;\n    let isDirect = false;\n    while (f != null) {\n      try {\n        if (typeof f[apiName] === 'function') {\n          cmpFrame = f;\n          isDirect = true;\n          break;\n        }\n      } catch (e) {\n      }\n\n      // need separate try/catch blocks due to the exception errors thrown when trying to check for a frame that doesn't exist in 3rd party env\n      try {\n        if (f.frames[`${apiName}Locator`]) {\n          cmpFrame = f;\n          break;\n        }\n      } catch (e) {\n      }\n\n      if (f === win.top) break;\n      f = f.parent;\n    }\n\n    return [\n      cmpFrame,\n      isDirect\n    ];\n  }\n\n  const [cmpFrame, isDirect] = findCMP();\n\n  if (!cmpFrame) {\n    return;\n  }\n\n  function resolveParams(params) {\n    params = Object.assign({version: apiVersion}, params);\n    return apiArgs.map(arg => [arg, params[arg]])\n  }\n\n  function wrapCallback(callback, resolve, reject, preamble) {\n    const haveCb = typeof callback === 'function';\n\n    return function (result, success) {\n      preamble && preamble();\n      if (mode !== MODE_RETURN) {\n        const resolver = success == null || success ? resolve : reject;\n        resolver(haveCb ? undefined : result);\n      }\n      haveCb && callback.apply(this, arguments);\n    }\n  }\n\n  let client;\n\n  if (isDirect) {\n    client = function invokeCMPDirect(params = {}) {\n      return new PbPromise((resolve, reject) => {\n        const ret = cmpFrame[apiName](...resolveParams({\n          ...params,\n          callback: (params.callback || mode === MODE_CALLBACK) ? wrapCallback(params.callback, resolve, reject) : undefined,\n        }).map(([_, val]) => val));\n        if (mode === MODE_RETURN || (params.callback == null && mode === MODE_MIXED)) {\n          resolve(ret);\n        }\n      });\n    };\n  } else {\n    win.addEventListener('message', handleMessage, false);\n\n    client = function invokeCMPFrame(params, once = false) {\n      return new PbPromise((resolve, reject) => {\n        // call CMP via postMessage\n        const callId = Math.random().toString();\n        const msg = {\n          [callName]: {\n            ...Object.fromEntries(resolveParams(params).filter(([param]) => param !== 'callback')),\n            callId: callId\n          }\n        };\n\n        cmpCallbacks[callId] = wrapCallback(params?.callback, resolve, reject, (once || params?.callback == null) && (() => { delete cmpCallbacks[callId] }));\n        cmpFrame.postMessage(msg, '*');\n        if (mode === MODE_RETURN) resolve();\n      });\n    };\n  }\n  return Object.assign(client, {\n    isDirect,\n    close() {\n      !isDirect && win.removeEventListener('message', handleMessage);\n    }\n  })\n}\n"],"names":["PbPromise","MODE_MIXED","MODE_RETURN","MODE_CALLBACK","cmpClient","_ref","apiName","apiVersion","apiArgs","callbackArgs","mode","win","arguments","length","undefined","window","cmpCallbacks","callName","cmpDataPkgName","handleMessage","event","json","data","includes","JSON","parse","callId","payload","hasOwnProperty","map","name","findCMP","f","cmpFrame","isDirect","e","frames","top","parent","resolveParams","params","Object","assign","version","arg","wrapCallback","callback","resolve","reject","preamble","haveCb","result","success","resolver","apply","client","invokeCMPDirect","ret","_ref2","_","val","addEventListener","invokeCMPFrame","once","Math","random","toString","msg","fromEntries","filter","_ref3","param","postMessage","close","removeEventListener"],"sourceRoot":""}