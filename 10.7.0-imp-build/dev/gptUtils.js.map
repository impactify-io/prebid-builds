{"version":3,"file":"gptUtils.js","mappings":"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","sources":["webpack://prebid.js/../../libraries/gptUtils/gptUtils.js"],"sourcesContent":["import { CLIENT_SECTIONS } from '../../src/fpd/oneClient.js';\nimport {compareCodeAndSlot, deepAccess, isGptPubadsDefined, uniques, isEmpty} from '../../src/utils.js';\n\nconst slotInfoCache = new Map();\n\nexport function clearSlotInfoCache() {\n  slotInfoCache.clear();\n}\n\n/**\n * Returns filter function to match adUnitCode in slot\n * @param {string} adUnitCode AdUnit code\n * @return {function} filter function\n */\nexport function isSlotMatchingAdUnitCode(adUnitCode) {\n  return (slot) => compareCodeAndSlot(slot, adUnitCode);\n}\n\n/**\n * @summary Export a k-v pair to GAM\n */\nexport function setKeyValue(key, value) {\n  if (!key || typeof key !== 'string') return false;\n  window.googletag = window.googletag || {cmd: []};\n  window.googletag.cmd = window.googletag.cmd || [];\n  window.googletag.cmd.push(() => {\n    window.googletag.pubads().setTargeting(key, value);\n  });\n}\n\n/**\n * @summary Uses the adUnit's code in order to find a matching gpt slot object on the page\n */\nexport function getGptSlotForAdUnitCode(adUnitCode) {\n  let matchingSlot;\n  if (isGptPubadsDefined()) {\n    // find the first matching gpt slot on the page\n    matchingSlot = window.googletag.pubads().getSlots().find(isSlotMatchingAdUnitCode(adUnitCode));\n  }\n  return matchingSlot;\n}\n\n/**\n * @summary Uses the adUnit's code in order to find a matching gptSlot on the page\n */\nexport function getGptSlotInfoForAdUnitCode(adUnitCode) {\n  if (slotInfoCache.has(adUnitCode)) {\n    return slotInfoCache.get(adUnitCode);\n  }\n  const matchingSlot = getGptSlotForAdUnitCode(adUnitCode);\n  let info = {};\n  if (matchingSlot) {\n    info = {\n      gptSlot: matchingSlot.getAdUnitPath(),\n      divId: matchingSlot.getSlotElementId()\n    };\n  }\n  !isEmpty(info) && slotInfoCache.set(adUnitCode, info);\n  return info;\n}\n\nexport const taxonomies = ['IAB_AUDIENCE_1_1', 'IAB_CONTENT_2_2'];\n\nexport function getSignals(fpd) {\n  const signals = Object.entries({\n    [taxonomies[0]]: getSegments(fpd, ['user.data'], 4),\n    [taxonomies[1]]: getSegments(fpd, CLIENT_SECTIONS.map(section => `${section}.content.data`), 6)\n  }).map(([taxonomy, values]) => values.length ? {taxonomy, values} : null)\n    .filter(ob => ob);\n\n  return signals;\n}\n\nexport function getSegments(fpd, sections, segtax) {\n  return sections\n    .flatMap(section => deepAccess(fpd, section) || [])\n    .filter(datum => datum.ext?.segtax === segtax)\n    .flatMap(datum => datum.segment?.map(seg => seg.id))\n    .filter(ob => ob)\n    .filter(uniques)\n}\n\n/**\n * Add an event listener on the given GAM event.\n * If GPT Pubads isn't defined, window.googletag is set to a new object.\n * @param {String} event\n * @param {Function} callback\n */\nexport function subscribeToGamEvent(event, callback) {\n  const register = () => window.googletag.pubads().addEventListener(event, callback);\n  if (isGptPubadsDefined()) {\n    register();\n    return;\n  }\n  window.googletag = window.googletag || {};\n  window.googletag.cmd = window.googletag.cmd || [];\n  window.googletag.cmd.push(register);\n}\n\n/**\n * @typedef {Object} Slot\n * @property {function(String): (String|null)} get\n * @property {function(): String} getAdUnitPath\n * @property {function(): String[]} getAttributeKeys\n * @property {function(): String[]} getCategoryExclusions\n * @property {function(String): String} getSlotElementId\n * @property {function(): String[]} getTargeting\n * @property {function(): String[]} getTargetingKeys\n * @see {@link https://developers.google.com/publisher-tag/reference#googletag.Slot GPT official docs}\n */\n\n/**\n * @typedef {Object} SlotRenderEndedEvent\n * @property {(String|null)} advertiserId\n * @property {(String|null)} campaignId\n * @property {(String[]|null)} companyIds\n * @property {(Number|null)} creativeId\n * @property {(Number|null)} creativeTemplateId\n * @property {(Boolean)} isBackfill\n * @property {(Boolean)} isEmpty\n * @property {(Number[]|null)} labelIds\n * @property {(Number|null)} lineItemId\n * @property {(String)} serviceName\n * @property {(string|Number[]|null)} size\n * @property {(Slot)} slot\n * @property {(Boolean)} slotContentChanged\n * @property {(Number|null)} sourceAgnosticCreativeId\n * @property {(Number|null)} sourceAgnosticLineItemId\n * @property {(Number[]|null)} yieldGroupIds\n * @see {@link https://developers.google.com/publisher-tag/reference#googletag.events.SlotRenderEndedEvent GPT official docs}\n */\n\n/**\n * @callback SlotRenderEndedEventCallback\n * @param {SlotRenderEndedEvent} event\n * @returns {void}\n */\n\n/**\n * Add an event listener on the GAM event 'slotRenderEnded'.\n * @param {SlotRenderEndedEventCallback} callback\n */\nexport function subscribeToGamSlotRenderEndedEvent(callback) {\n  subscribeToGamEvent('slotRenderEnded', callback)\n}\n"],"names":["CLIENT_SECTIONS","compareCodeAndSlot","deepAccess","isGptPubadsDefined","uniques","isEmpty","slotInfoCache","Map","clearSlotInfoCache","clear","isSlotMatchingAdUnitCode","adUnitCode","slot","setKeyValue","key","value","window","googletag","cmd","push","pubads","setTargeting","getGptSlotForAdUnitCode","matchingSlot","getSlots","find","getGptSlotInfoForAdUnitCode","has","get","info","gptSlot","getAdUnitPath","divId","getSlotElementId","set","taxonomies","getSignals","fpd","signals","Object","entries","getSegments","map","section","_ref","taxonomy","values","length","filter","ob","sections","segtax","flatMap","datum","ext","segment","seg","id","subscribeToGamEvent","event","callback","register","addEventListener","subscribeToGamSlotRenderEndedEvent"],"sourceRoot":""}