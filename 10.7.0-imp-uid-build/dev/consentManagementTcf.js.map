{"version":3,"file":"consentManagementTcf.js","mappings":"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","sources":["webpack://prebid.js/../../modules/consentManagementTcf.ts"],"sourcesContent":["/**\n * This module adds GDPR consentManagement support to prebid.js.  It interacts with\n * supported CMPs (Consent Management Platforms) to grab the user's consent information\n * and make it available for any GDPR supported adapters to read/pass this information to\n * their system.\n */\nimport {deepSetValue, isStr, logInfo} from '../src/utils.js';\nimport {config} from '../src/config.js';\nimport {gdprDataHandler} from '../src/adapterManager.js';\nimport {registerOrtbProcessor, REQUEST} from '../src/pbjsORTB.js';\nimport {enrichFPD} from '../src/fpd/enrichment.js';\nimport {cmpClient} from '../libraries/cmp/cmpClient.js';\nimport {configParser} from '../libraries/consentManagement/cmUtils.js';\nimport {CONSENT_GDPR} from \"../src/consentHandler.ts\";\nimport type {CMConfig} from \"../libraries/consentManagement/cmUtils.ts\";\n\nexport let consentConfig: any = {};\nexport let gdprScope;\nlet dsaPlatform;\nconst CMP_VERSION = 2;\n\n// add new CMPs here, with their dedicated lookup function\nconst cmpCallMap = {\n  'iab': lookupIabConsent,\n};\n\n/**\n * @see https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework\n * @see https://github.com/InteractiveAdvertisingBureau/iabtcf-es/tree/master/modules/core#iabtcfcore\n */\nexport type TCFConsentData = {\n  apiVersion: typeof CMP_VERSION;\n  /**\n   * The consent string.\n   */\n  consentString: string;\n  /**\n   * True if GDPR is in scope.\n   */\n  gdprApplies: boolean;\n  /**\n   * The response from the CMP.\n   */\n  vendorData: Record<string, unknown>;\n  /**\n   * Additional consent string, if provided by the CMP.\n   * @see https://support.google.com/admanager/answer/9681920?hl=en\n   */\n  addtlConsent?: `${number}~${string}~${string}`;\n}\n\nexport interface TCFConfig {\n  /**\n   *  Defines what the gdprApplies flag should be when the CMP doesn’t respond in time or the static data doesn’t supply.\n   *  Defaults to false.\n   */\n  defaultGdprScope?: boolean;\n  /**\n   * If true, indicates that the publisher is to be considered an “Online Platform” for the purposes of the Digital Services Act\n   */\n  dsaPlatform?: boolean;\n}\n\ntype TCFCMConfig = TCFConfig & CMConfig<TCFConsentData>;\n\ndeclare module '../src/consentHandler' {\n  interface ConsentData {\n    [CONSENT_GDPR]: TCFConsentData;\n  }\n  interface ConsentManagementConfig {\n    [CONSENT_GDPR]?: TCFCMConfig;\n  }\n}\n\n/**\n * This function handles interacting with an IAB compliant CMP to obtain the consent information of the user.\n */\nfunction lookupIabConsent(setProvisionalConsent) {\n  return new Promise<void>((resolve, reject) => {\n    function cmpResponseCallback(tcfData, success) {\n      logInfo('Received a response from CMP', tcfData);\n      if (success) {\n        try {\n          setProvisionalConsent(parseConsentData(tcfData));\n        } catch (e) {\n        }\n\n        if (tcfData.gdprApplies === false || tcfData.eventStatus === 'tcloaded' || tcfData.eventStatus === 'useractioncomplete') {\n          try {\n            gdprDataHandler.setConsentData(parseConsentData(tcfData));\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        }\n      } else {\n        reject(Error('CMP unable to register callback function.  Please check CMP setup.'))\n      }\n    }\n\n    const cmp = cmpClient({\n      apiName: '__tcfapi',\n      apiVersion: CMP_VERSION,\n      apiArgs: ['command', 'version', 'callback', 'parameter'],\n    });\n\n    if (!cmp) {\n      reject(new Error('TCF2 CMP not found.'))\n    }\n    if ((cmp as any).isDirect) {\n      logInfo('Detected CMP API is directly accessible, calling it now...');\n    } else {\n      logInfo('Detected CMP is outside the current iframe where Prebid.js is located, calling it now...');\n    }\n\n    cmp({\n      command: 'addEventListener',\n      callback: cmpResponseCallback\n    })\n  })\n}\n\nfunction parseConsentData(consentObject): TCFConsentData {\n  function checkData() {\n    // if CMP does not respond with a gdprApplies boolean, use defaultGdprScope (gdprScope)\n    const gdprApplies = consentObject && typeof consentObject.gdprApplies === 'boolean' ? consentObject.gdprApplies : gdprScope;\n    const tcString = consentObject && consentObject.tcString;\n    return !!(\n      (typeof gdprApplies !== 'boolean') ||\n      (gdprApplies === true && (!tcString || !isStr(tcString)))\n    );\n  }\n\n  if (checkData()) {\n    throw Object.assign(new Error(`CMP returned unexpected value during lookup process.`), {args: [consentObject]})\n  } else {\n    return toConsentData(consentObject);\n  }\n}\n\nfunction toConsentData(cmpConsentObject) {\n  const consentData: TCFConsentData = {\n    consentString: (cmpConsentObject) ? cmpConsentObject.tcString : undefined,\n    vendorData: (cmpConsentObject) || undefined,\n    gdprApplies: cmpConsentObject && typeof cmpConsentObject.gdprApplies === 'boolean' ? cmpConsentObject.gdprApplies : gdprScope,\n    apiVersion: CMP_VERSION\n  };\n  if (cmpConsentObject && cmpConsentObject.addtlConsent && isStr(cmpConsentObject.addtlConsent)) {\n    consentData.addtlConsent = cmpConsentObject.addtlConsent;\n  }\n  return consentData;\n}\n\n/**\n * Simply resets the module's consentData variable back to undefined, mainly for testing purposes\n */\nexport function resetConsentData() {\n  consentConfig = {};\n  gdprDataHandler.reset();\n}\n\nconst parseConfig = configParser({\n  namespace: 'gdpr',\n  displayName: 'TCF',\n  consentDataHandler: gdprDataHandler,\n  cmpHandlers: cmpCallMap,\n  parseConsentData,\n  getNullConsent: () => toConsentData(null)\n} as any)\n/**\n * A configuration function that initializes some module variables, as well as add a hook into the requestBids function\n */\nexport function setConsentConfig(config) {\n  // if `config.gdpr`, `config.usp` or `config.gpp` exist, assume new config format.\n  // else for backward compatability, just use `config`\n  const tcfConfig: TCFCMConfig = config && (config.gdpr || config.usp || config.gpp ? config.gdpr : config);\n  if ((tcfConfig?.consentData as any)?.getTCData != null) {\n    tcfConfig.consentData = (tcfConfig.consentData as any).getTCData;\n  }\n  gdprScope = tcfConfig?.defaultGdprScope === true;\n  dsaPlatform = !!tcfConfig?.dsaPlatform;\n  consentConfig = parseConfig({gdpr: tcfConfig});\n  return consentConfig.loadConsentData?.()?.catch?.(() => null);\n}\nconfig.getConfig('consentManagement', config => setConsentConfig(config.consentManagement));\n\nexport function enrichFPDHook(next, fpd) {\n  return next(fpd.then(ortb2 => {\n    const consent = gdprDataHandler.getConsentData();\n    if (consent) {\n      if (typeof consent.gdprApplies === 'boolean') {\n        deepSetValue(ortb2, 'regs.ext.gdpr', consent.gdprApplies ? 1 : 0);\n      }\n      deepSetValue(ortb2, 'user.ext.consent', consent.consentString);\n    }\n    if (dsaPlatform) {\n      deepSetValue(ortb2, 'regs.ext.dsa.dsarequired', 3);\n    }\n    return ortb2;\n  }));\n}\n\nenrichFPD.before(enrichFPDHook);\n\nexport function setOrtbAdditionalConsent(ortbRequest, bidderRequest) {\n  // this is not a standardized name for addtlConsent, so keep this as an ORTB library processor rather than an FPD enrichment\n  const addtl = bidderRequest.gdprConsent?.addtlConsent;\n  if (addtl && typeof addtl === 'string') {\n    deepSetValue(ortbRequest, 'user.ext.ConsentedProvidersSettings.consented_providers', addtl);\n  }\n}\n\nregisterOrtbProcessor({type: REQUEST, name: 'gdprAddtlConsent', fn: setOrtbAdditionalConsent})\n"],"names":["registerModule","__r0","deepSetValue","isStr","logInfo","config","gdprDataHandler","registerOrtbProcessor","REQUEST","enrichFPD","cmpClient","configParser","CONSENT_GDPR","consentConfig","gdprScope","dsaPlatform","CMP_VERSION","cmpCallMap","lookupIabConsent","setProvisionalConsent","Promise","resolve","reject","cmpResponseCallback","tcfData","success","parseConsentData","e","gdprApplies","eventStatus","setConsentData","Error","cmp","apiName","apiVersion","apiArgs","isDirect","command","callback","consentObject","checkData","tcString","Object","assign","args","toConsentData","cmpConsentObject","consentData","consentString","undefined","vendorData","addtlConsent","resetConsentData","reset","parseConfig","namespace","displayName","consentDataHandler","cmpHandlers","getNullConsent","setConsentConfig","tcfConfig","gdpr","usp","gpp","getTCData","defaultGdprScope","loadConsentData","catch","getConfig","consentManagement","enrichFPDHook","next","fpd","then","ortb2","consent","getConsentData","before","setOrtbAdditionalConsent","ortbRequest","bidderRequest","addtl","gdprConsent","type","name","fn"],"sourceRoot":""}