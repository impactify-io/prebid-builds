{"version":3,"file":"metadata.js","mappings":";;;;;;;;;;;;;AAAO,SAASA,kBAAkBA,CAAA,EAAG;EACnC,MAAMC,UAAU,GAAG,CAAC,CAAC;EACrB,MAAMC,WAAW,GAAG,CAAC,CAAC;EACtB,MAAMC,kBAAkB,GAAG,CAAC,CAAC;EAE7B,MAAMC,IAAI,GAAG;IACXC,QAAQA,CAACC,UAAU,EAAEC,IAAI,EAAE;MACzB,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACN,UAAU,CAAC,EAAE;QAClC,IAAI,CAACE,kBAAkB,CAACO,cAAc,CAACJ,UAAU,CAAC,EAAE;UAClDH,kBAAkB,CAACG,UAAU,CAAC,GAAG,EAAE;QACrC;QACAC,IAAI,CAACN,UAAU,CAACU,OAAO,CAACC,SAAS,IAAI;UACnC,IAAI,CAACX,UAAU,CAACS,cAAc,CAACE,SAAS,CAACC,aAAa,CAAC,EAAE;YACvDZ,UAAU,CAACW,SAAS,CAACC,aAAa,CAAC,GAAG,CAAC,CAAC;UAC1C;UACAZ,UAAU,CAACW,SAAS,CAACC,aAAa,CAAC,CAACD,SAAS,CAACE,aAAa,CAAC,GAAGF,SAAS;UACxET,kBAAkB,CAACG,UAAU,CAAC,CAACS,IAAI,CAAC,CAACH,SAAS,CAACC,aAAa,EAAED,SAAS,CAACE,aAAa,CAAC,CAAC;QACzF,CAAC,CAAC;MACJ;MACA,IAAIP,IAAI,CAACL,WAAW,EAAE;QACpBc,MAAM,CAACC,MAAM,CAACf,WAAW,EAAEK,IAAI,CAACL,WAAW,CAAC;MAC9C;IACF,CAAC;IACDgB,WAAWA,CAACL,aAAa,EAAEC,aAAa,EAAE;MACxC,OAAOb,UAAU,GAAGY,aAAa,CAAC,GAAGC,aAAa,CAAC;IACrD,CAAC;IACDK,oBAAoBA,CAACC,aAAa,EAAE;MAClC,OAAOlB,WAAW,GAAGkB,aAAa,CAAC;IACrC,CAAC;IACDC,iBAAiBA,CAACf,UAAU,EAAE;MAC5B,MAAML,UAAU,GAAG,CAACE,kBAAkB,CAACG,UAAU,CAAC,IAAI,EAAE,EACrDgB,GAAG,CAACC,IAAA;QAAA,IAAC,CAACV,aAAa,EAAEC,aAAa,CAAC,GAAAS,IAAA;QAAA,OAAKnB,IAAI,CAACc,WAAW,CAACL,aAAa,EAAEC,aAAa,CAAC;MAAA,EAAC;MAC1F,IAAIb,UAAU,CAACuB,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;MACxC,MAAMtB,WAAW,GAAGc,MAAM,CAACS,WAAW,CACpCxB,UAAU,CACPyB,MAAM,CAACC,KAAA;QAAA,IAAC;UAACP;QAAa,CAAC,GAAAO,KAAA;QAAA,OAAKP,aAAa,IAAI,IAAI;MAAA,EAAC,CAClDE,GAAG,CAACM,KAAA;QAAA,IAAC;UAACR;QAAa,CAAC,GAAAQ,KAAA;QAAA,OAAK,CAACR,aAAa,EAAEhB,IAAI,CAACe,oBAAoB,CAACC,aAAa,CAAC,CAAC;MAAA,EACvF,CAAC;MACD,OAAO;QACLlB,WAAW;QACXD;MACF,CAAC;IACH;EACF,CAAC;EACD,OAAOG,IAAI;AACb;AAEO,MAAMyB,QAAQ,GAAG7B,kBAAkB,CAAC,CAAC","sources":["webpack://prebid.js/../../libraries/metadata/metadata.js"],"sourcesContent":["export function metadataRepository() {\n  const components = {};\n  const disclosures = {};\n  const componentsByModule = {};\n\n  const repo = {\n    register(moduleName, data) {\n      if (Array.isArray(data.components)) {\n        if (!componentsByModule.hasOwnProperty(moduleName)) {\n          componentsByModule[moduleName] = [];\n        }\n        data.components.forEach(component => {\n          if (!components.hasOwnProperty(component.componentType)) {\n            components[component.componentType] = {};\n          }\n          components[component.componentType][component.componentName] = component;\n          componentsByModule[moduleName].push([component.componentType, component.componentName]);\n        })\n      }\n      if (data.disclosures) {\n        Object.assign(disclosures, data.disclosures);\n      }\n    },\n    getMetadata(componentType, componentName) {\n      return components?.[componentType]?.[componentName];\n    },\n    getStorageDisclosure(disclosureURL) {\n      return disclosures?.[disclosureURL];\n    },\n    getModuleMetadata(moduleName) {\n      const components = (componentsByModule[moduleName] ?? [])\n        .map(([componentType, componentName]) => repo.getMetadata(componentType, componentName));\n      if (components.length === 0) return null;\n      const disclosures = Object.fromEntries(\n        components\n          .filter(({disclosureURL}) => disclosureURL != null)\n          .map(({disclosureURL}) => [disclosureURL, repo.getStorageDisclosure(disclosureURL)])\n      )\n      return {\n        disclosures,\n        components\n      }\n    },\n  }\n  return repo;\n}\n\nexport const metadata = metadataRepository();\n"],"names":["metadataRepository","components","disclosures","componentsByModule","repo","register","moduleName","data","Array","isArray","hasOwnProperty","forEach","component","componentType","componentName","push","Object","assign","getMetadata","getStorageDisclosure","disclosureURL","getModuleMetadata","map","_ref","length","fromEntries","filter","_ref2","_ref3","metadata"],"sourceRoot":""}