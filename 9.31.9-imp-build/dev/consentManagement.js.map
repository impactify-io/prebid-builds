{"version":3,"file":"consentManagement.js","mappings":"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","sources":["webpack://prebid.js/./libraries/consentManagement/cmUtils.js"],"sourcesContent":["import {timedAuctionHook} from '../../src/utils/perfMetrics.js';\nimport {isNumber, isPlainObject, isStr, logError, logInfo, logWarn} from '../../src/utils.js';\nimport {ConsentHandler} from '../../src/consentHandler.js';\nimport {getGlobal} from '../../src/prebidGlobal.js';\nimport {PbPromise} from '../../src/utils/promise.js';\nimport {buildActivityParams} from '../../src/activities/params.js';\n\nexport function consentManagementHook(name, loadConsentData) {\n  const SEEN = new WeakSet();\n  return timedAuctionHook(name, function requestBidsHook(fn, reqBidsConfigObj) {\n    return loadConsentData().then(({consentData, error}) => {\n      if (error && (!consentData || !SEEN.has(error))) {\n        SEEN.add(error);\n        logWarn(error.message, ...(error.args || []));\n      }\n      fn.call(this, reqBidsConfigObj);\n    }).catch((error) => {\n      logError(`${error?.message} Canceling auction as per consentManagement config.`, ...(error?.args || []));\n      fn.stopTiming();\n      if (typeof reqBidsConfigObj.bidsBackHandler === 'function') {\n        reqBidsConfigObj.bidsBackHandler();\n      } else {\n        logError('Error executing bidsBackHandler');\n      }\n    });\n  });\n}\n\n/**\n *\n * @typedef {Function} CmpLookupFn CMP lookup function. Should set up communication and keep consent data updated\n *   through consent data handlers' `setConsentData`.\n * @param {SetProvisionalConsent} setProvisionalConsent optionally, the function can call this with provisional consent\n *   data, which will be used if the lookup times out before \"proper\" consent data can be retrieved.\n * @returns {Promise<{void}>} a promise that resolves when the auction should be continued, or rejects if it should be canceled.\n *\n * @typedef {Function} SetProvisionalConsent\n * @param {*} provisionalConsent\n * @returns {void}\n */\n\n/**\n * Look up consent data from CMP or config.\n *\n * @param {Object} options\n * @param {String} options.name e.g. 'GPP'. Used only for log messages.\n * @param {ConsentHandler} options.consentDataHandler consent data handler object (from src/consentHandler)\n * @param {CmpLookupFn} options.setupCmp\n * @param {Number?} options.cmpTimeout timeout (in ms) after which the auction should continue without consent data.\n * @param {Number?} options.actionTimeout timeout (in ms) from when provisional consent is available to when the auction should continue with it\n * @param {() => {}} options.getNullConsent consent data to use on timeout\n * @returns {Promise<{error: Error, consentData: {}}>}\n */\nexport function lookupConsentData(\n  {\n    name,\n    consentDataHandler,\n    setupCmp,\n    cmpTimeout,\n    actionTimeout,\n    getNullConsent\n  }\n) {\n  consentDataHandler.enable();\n  let timeoutHandle;\n\n  return new Promise((resolve, reject) => {\n    let provisionalConsent;\n    let cmpLoaded = false;\n\n    function setProvisionalConsent(consentData) {\n      provisionalConsent = consentData;\n      if (!cmpLoaded) {\n        cmpLoaded = true;\n        actionTimeout != null && resetTimeout(actionTimeout);\n      }\n    }\n\n    function resetTimeout(timeout) {\n      if (timeoutHandle != null) clearTimeout(timeoutHandle);\n      if (timeout != null) {\n        timeoutHandle = setTimeout(() => {\n          const consentData = consentDataHandler.getConsentData() ?? (cmpLoaded ? provisionalConsent : getNullConsent());\n          const message = `timeout waiting for ${cmpLoaded ? 'user action on CMP' : 'CMP to load'}`;\n          consentDataHandler.setConsentData(consentData);\n          resolve({consentData, error: new Error(`${name} ${message}`)});\n        }, timeout);\n      } else {\n        timeoutHandle = null;\n      }\n    }\n    setupCmp(setProvisionalConsent)\n      .then(() => resolve({consentData: consentDataHandler.getConsentData()}), reject);\n    cmpTimeout != null && resetTimeout(cmpTimeout);\n  }).finally(() => {\n    timeoutHandle && clearTimeout(timeoutHandle);\n  }).catch((e) => {\n    consentDataHandler.setConsentData(null);\n    throw e;\n  });\n}\n\nexport function configParser(\n  {\n    namespace,\n    displayName,\n    consentDataHandler,\n    parseConsentData,\n    getNullConsent,\n    cmpHandlers,\n    DEFAULT_CMP = 'iab',\n    DEFAULT_CONSENT_TIMEOUT = 10000\n  } = {}\n) {\n  function msg(message) {\n    return `consentManagement.${namespace} ${message}`;\n  }\n  let requestBidsHook, cdLoader, staticConsentData;\n\n  function attachActivityParams(next, params) {\n    return next(Object.assign({[`${namespace}Consent`]: consentDataHandler.getConsentData()}, params));\n  }\n\n  function loadConsentData() {\n    return cdLoader().then(({error}) => ({error, consentData: consentDataHandler.getConsentData()}))\n  }\n\n  function activate() {\n    if (requestBidsHook == null) {\n      requestBidsHook = consentManagementHook(namespace, () => cdLoader());\n      getGlobal().requestBids.before(requestBidsHook, 50);\n      buildActivityParams.before(attachActivityParams);\n      logInfo(`${displayName} consentManagement module has been activated...`)\n    }\n  }\n\n  function reset() {\n    if (requestBidsHook != null) {\n      getGlobal().requestBids.getHooks({hook: requestBidsHook}).remove();\n      buildActivityParams.getHooks({hook: attachActivityParams}).remove();\n      requestBidsHook = null;\n    }\n  }\n\n\n  return function getConsentConfig(config) {\n    config = config?.[namespace];\n    if (!config || typeof config !== 'object') {\n      logWarn(msg(`config not defined, exiting consent manager module`));\n      reset();\n      return {};\n    }\n    let cmpHandler;\n    if (isStr(config.cmpApi)) {\n      cmpHandler = config.cmpApi;\n    } else {\n      cmpHandler = DEFAULT_CMP;\n      logInfo(msg(`config did not specify cmp.  Using system default setting (${DEFAULT_CMP}).`));\n    }\n    let cmpTimeout;\n    if (isNumber(config.timeout)) {\n      cmpTimeout = config.timeout;\n    } else {\n      cmpTimeout = DEFAULT_CONSENT_TIMEOUT;\n      logInfo(msg(`config did not specify timeout.  Using system default setting (${DEFAULT_CONSENT_TIMEOUT}).`));\n    }\n    const actionTimeout = isNumber(config.actionTimeout) ? config.actionTimeout : null;\n    let setupCmp;\n    if (cmpHandler === 'static') {\n      if (isPlainObject(config.consentData)) {\n        staticConsentData = config.consentData;\n        cmpTimeout = null;\n        setupCmp = () => new PbPromise(resolve => resolve(consentDataHandler.setConsentData(parseConsentData(staticConsentData))))\n      } else {\n        logError(msg(`config with cmpApi: 'static' did not specify consentData. No consents will be available to adapters.`));\n      }\n    } else if (!cmpHandlers.hasOwnProperty(cmpHandler)) {\n      consentDataHandler.setConsentData(null);\n      logWarn(`${displayName} CMP framework (${cmpHandler}) is not a supported framework.  Aborting consentManagement module and resuming auction.`);\n      setupCmp = () => PbPromise.resolve();\n    } else {\n      setupCmp = cmpHandlers[cmpHandler];\n    }\n\n    const lookup = () => lookupConsentData({\n      name: displayName,\n      consentDataHandler,\n      setupCmp,\n      cmpTimeout,\n      actionTimeout,\n      getNullConsent,\n    });\n\n    cdLoader = (() => {\n      let cd;\n      return function () {\n        if (cd == null) {\n          cd = lookup().catch(err => {\n            cd = null;\n            throw err;\n          })\n        }\n        return cd;\n      }\n    })();\n\n    activate();\n    return {\n      cmpHandler,\n      cmpTimeout,\n      actionTimeout,\n      staticConsentData,\n      loadConsentData,\n      requestBidsHook\n    }\n  }\n}\n"],"names":["timedAuctionHook","isNumber","isPlainObject","isStr","logError","logInfo","logWarn","ConsentHandler","getGlobal","PbPromise","buildActivityParams","consentManagementHook","name","loadConsentData","SEEN","WeakSet","requestBidsHook","fn","reqBidsConfigObj","then","_ref","consentData","error","has","add","message","args","call","catch","stopTiming","bidsBackHandler","lookupConsentData","_ref2","consentDataHandler","setupCmp","cmpTimeout","actionTimeout","getNullConsent","enable","timeoutHandle","Promise","resolve","reject","provisionalConsent","cmpLoaded","setProvisionalConsent","resetTimeout","timeout","clearTimeout","setTimeout","getConsentData","setConsentData","Error","finally","e","configParser","namespace","displayName","parseConsentData","cmpHandlers","DEFAULT_CMP","DEFAULT_CONSENT_TIMEOUT","arguments","length","undefined","msg","cdLoader","staticConsentData","attachActivityParams","next","params","Object","assign","_ref3","activate","requestBids","before","reset","getHooks","hook","remove","getConsentConfig","config","cmpHandler","cmpApi","hasOwnProperty","lookup","cd","err"],"sourceRoot":""}