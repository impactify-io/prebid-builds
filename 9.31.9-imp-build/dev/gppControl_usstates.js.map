{"version":3,"file":"gppControl_usstates.js","mappings":"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","sources":["webpack://prebid.js/./modules/gppControl_usstates.js"],"sourcesContent":["import {config} from '../src/config.js';\nimport {setupRules} from '../libraries/mspa/activityControls.js';\nimport {deepSetValue, prefixLog} from '../src/utils.js';\n\nconst FIELDS = {\n  Version: 0,\n  Gpc: 0,\n  SharingNotice: 0,\n  SaleOptOutNotice: 0,\n  SharingOptOutNotice: 0,\n  TargetedAdvertisingOptOutNotice: 0,\n  SensitiveDataProcessingOptOutNotice: 0,\n  SensitiveDataLimitUseNotice: 0,\n  SaleOptOut: 0,\n  SharingOptOut: 0,\n  TargetedAdvertisingOptOut: 0,\n  SensitiveDataProcessing: 12,\n  KnownChildSensitiveDataConsents: 2,\n  PersonalDataConsents: 0,\n  MspaCoveredTransaction: 0,\n  MspaOptOutOptionMode: 0,\n  MspaServiceProviderMode: 0,\n};\n\n/**\n * Generate a normalization function for converting US state strings to the usnat format.\n *\n * Scalar fields are copied over if they exist in the input (state) data, or set to null otherwise.\n * List fields are also copied, but forced to the \"correct\" length (by truncating or padding with nulls);\n * additionally, elements within them can be moved around using the `move` argument.\n *\n * @param {Array[String]} nullify? list of fields to force to null\n * @param {{}} move? Map from list field name to an index remapping for elements within that field (using 1 as the first index).\n *       For example, {SensitiveDataProcessing: {1: 2, 2: [1, 3]}} means \"rearrange SensitiveDataProcessing by moving\n *       the first element to the second position, and the second element to both the first and third position.\"\n * @param {({}, {}) => void} fn? an optional function to run once all the processing described above is complete;\n *       it's passed two arguments, the original (state) data, and its normalized (usnat) version.\n * @param fields\n * @returns {function({}): {}}\n */\nexport function normalizer({nullify = [], move = {}, fn}, fields = FIELDS) {\n  move = Object.fromEntries(Object.entries(move).map(([k, map]) => [k,\n    Object.fromEntries(Object.entries(map)\n      .map(([k, v]) => [k, Array.isArray(v) ? v : [v]])\n      .map(([k, v]) => [--k, v.map(el => --el)])\n    )])\n  );\n  return function (cd) {\n    const norm = Object.fromEntries(Object.entries(fields)\n      .map(([field, len]) => {\n        let val = null;\n        if (len > 0) {\n          val = Array(len).fill(null);\n          if (Array.isArray(cd[field])) {\n            const remap = move[field] || {};\n            const done = [];\n            cd[field].forEach((el, i) => {\n              const [dest, moved] = remap.hasOwnProperty(i) ? [remap[i], true] : [[i], false];\n              dest.forEach(d => {\n                if (d < len && !done.includes(d)) {\n                  val[d] = el;\n                  moved && done.push(d);\n                }\n              });\n            });\n          }\n        } else if (cd[field] != null) {\n          val = Array.isArray(cd[field]) ? null : cd[field];\n        }\n        return [field, val];\n      }));\n    nullify.forEach(path => deepSetValue(norm, path, null));\n    fn && fn(cd, norm);\n    return norm;\n  };\n}\n\nfunction scalarMinorsAreChildren(original, normalized) {\n  normalized.KnownChildSensitiveDataConsents = original.KnownChildSensitiveDataConsents === 0 ? [0, 0] : [1, 1];\n}\n\nexport const NORMALIZATIONS = {\n  // normalization rules - convert state consent into usnat consent\n  // https://docs.prebid.org/features/mspa-usnat.html\n  7: (consent) => consent,\n  8: normalizer({\n    move: {\n      SensitiveDataProcessing: {\n        1: 9,\n        2: 10,\n        3: 8,\n        4: [1, 2],\n        5: 12,\n        8: 3,\n        9: 4,\n      }\n    },\n    fn(original, normalized) {\n      if (original.KnownChildSensitiveDataConsents.some(el => el !== 0)) {\n        normalized.KnownChildSensitiveDataConsents = [1, 1];\n      }\n    }\n  }),\n  9: normalizer({fn: scalarMinorsAreChildren}),\n  10: normalizer({fn: scalarMinorsAreChildren}),\n  11: normalizer({\n    move: {\n      SensitiveDataProcessing: {\n        3: 4,\n        4: 5,\n        5: 3,\n      }\n    },\n    fn: scalarMinorsAreChildren\n  }),\n  12: normalizer({\n    fn(original, normalized) {\n      const cc = original.KnownChildSensitiveDataConsents;\n      let repl;\n      if (!cc.some(el => el !== 0)) {\n        repl = [0, 0];\n      } else if (cc[1] === 2 && cc[2] === 2) {\n        repl = [2, 1];\n      } else {\n        repl = [1, 1];\n      }\n      normalized.KnownChildSensitiveDataConsents = repl;\n    }\n  })\n};\n\nexport const DEFAULT_SID_MAPPING = {\n  8: 'usca',\n  9: 'usva',\n  10: 'usco',\n  11: 'usut',\n  12: 'usct'\n};\n\nexport const getSections = (() => {\n  const allSIDs = Object.keys(DEFAULT_SID_MAPPING).map(Number);\n  return function ({sections = {}, sids = allSIDs} = {}) {\n    return sids.map(sid => {\n      const logger = prefixLog(`Cannot set up MSPA controls for SID ${sid}:`);\n      const ov = sections[sid] || {};\n      const normalizeAs = ov.normalizeAs || sid;\n      if (!NORMALIZATIONS.hasOwnProperty(normalizeAs)) {\n        logger.logError(`no normalization rules are known for SID ${normalizeAs}`)\n        return;\n      }\n      const api = ov.name || DEFAULT_SID_MAPPING[sid];\n      if (typeof api !== 'string') {\n        logger.logError(`cannot determine GPP section name`)\n        return;\n      }\n      return [\n        api,\n        [sid],\n        NORMALIZATIONS[normalizeAs]\n      ]\n    }).filter(el => el != null);\n  }\n})();\n\nconst handles = [];\n\nconfig.getConfig('consentManagement', (cfg) => {\n  const gppConf = cfg.consentManagement?.gpp;\n  if (gppConf) {\n    while (handles.length) {\n      handles.pop()();\n    }\n    getSections(gppConf?.mspa || {})\n      .forEach(([api, sids, normalize]) => handles.push(setupRules(api, sids, normalize)));\n  }\n});\n"],"names":["registerModule","__r0","config","setupRules","deepSetValue","prefixLog","FIELDS","Version","Gpc","SharingNotice","SaleOptOutNotice","SharingOptOutNotice","TargetedAdvertisingOptOutNotice","SensitiveDataProcessingOptOutNotice","SensitiveDataLimitUseNotice","SaleOptOut","SharingOptOut","TargetedAdvertisingOptOut","SensitiveDataProcessing","KnownChildSensitiveDataConsents","PersonalDataConsents","MspaCoveredTransaction","MspaOptOutOptionMode","MspaServiceProviderMode","normalizer","_ref","nullify","move","fn","fields","arguments","length","undefined","Object","fromEntries","entries","map","_ref2","k","_ref3","v","Array","isArray","_ref4","el","cd","norm","_ref5","field","len","val","fill","remap","done","forEach","i","dest","moved","hasOwnProperty","d","includes","push","path","scalarMinorsAreChildren","original","normalized","NORMALIZATIONS","consent","some","cc","repl","DEFAULT_SID_MAPPING","getSections","allSIDs","keys","Number","sections","sids","sid","logger","ov","normalizeAs","logError","api","name","filter","handles","getConfig","cfg","gppConf","consentManagement","gpp","pop","mspa","_ref6","normalize"],"sourceRoot":""}